#+TITLE: myinit.org
#+AUTHOR: Andrés Herrera Poyatos

* Introduction: my Emacs configuration file

This is my Emacs init file, written in org-mode using literate programming. The configuration file is mainly inspired in Mario Román's emacs configuration (https://github.com/M42/.emacs.d).
He has taken ideas for his configuration mainly from:

 - [[http://cestlaz.github.io/][C'est la Z]]
 - [[https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org][Harry R. Schwartz's configuration file]]

It works on Emacs 25.1 and org-mode 9.0.5.

** Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Andrés Herrera Poyatos"
      user-mail-address "andreshp9@gmail.com")
#+END_SRC

* use-package

Here we configure and explain the =use-package utility=, which will be used through all the emacs configuration. The package =use-package= allows us to easily install and configure packages and reduces the loading charge of emacs. In order to do so it postpones some packages related operations until emacs is completely loaded.

The standard syntaxis of =use-package= is

(use-package foo
  :init
  (setq foo-variable t)
  :config
  (foo-mode 1))

With these commands =use-package= will load the package =foo= when starting emacs. The init commands are executed while the =foo= package is being loaded. On the other hand, the config commands are executed when the package is completely loaded. As a consequence emacs loading charge is reduced. If the =foo= package is not installed, then =use-package= produces a warning when starting emacs. You can let =use-package= to install the package byitself with the =:ensure t= command:

(use-package foo
  :ensure t
  :init
  (setq foo-variable t)
  :config
  (foo-mode 1))

However, I prefer this behaviour to be used by default. Hence I use the following =use-package= setting.

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC 

* Emacs default behavior

Improves emacs default behavior. Concretely, the menu is not displayed.

#+BEGIN_SRC emacs-lisp
(use-package better-defaults)
#+END_SRC 

Maximizes the editor to fullscreen at startup.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC 

* Text formating

** Font choice

Chooses Source Code Pro as the editor's font.

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
    ;; custom-set-faces was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
    '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 102 :width normal :foundry "PfEd" :family "Source Code Pro")))))
#+END_SRC


** Indentation

Choose the tab's size.

#+BEGIN_SRC emacs-lisp
  (setq tab-width 4)
#+END_SRC

Uses SmartTabs. You can find a good explanation about why using SmartTabs in https://www.emacswiki.org/emacs/TabsAreEvil. 

#+BEGIN_SRC emacs-lisp
;  (setq-default indent-tabs-mode nt)
  (use-package smart-tabs-mode)
#+END_SRC


** Visual line mode

Sets the row length in characters (fill-column variable) and turns orn the visual-line-mode along with visual-fill-column minor mode.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 100)
#+END_SRC

An introduction to wraps and filling in Emacs can be found in [[johnlaudun.org/20080321-word-wrap-filling-in-emacs/][John Laudun's blog]].

Visual-liºne-mode allows us to use soft wraps when the text line's length is greater than the current windows width. If we use this mode with the minor mode visual-fill-column, then we can choose a maximum line's length, measured in number of characters. The number of characters is saved in the fill-column variable.

The following code also sets a symbol for soft wrapped lines, which is used instead of a line number.

#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column
  :init
  (setq visual-line-fringe-indicators '(left-curly-arrow nil)); Symbol used for soft wrapped lines.
  :config
  (global-visual-line-mode 1)
  (global-visual-fill-column-mode)
)
#+END_SRC

Most of the information used to set this code can be read in https://www.emacswiki.org/emacs/VisualLineMode.

* Text editing

** Cua-mode

#+BEGIN_SRC emacs-lisp
(cua-mode t)
(setq cua-normal-cursor-color "#839496")
(setq cua-overwrite-cursor-color "#b58900")
(setq cua-read-only-cursor-color "#859900")
(setq cua-global-mark-cursor-color "#2aa198")
#+END_SRC

** Multiple cursors

Uses the package =multiple-cursors= and some key-bindings for it. You can see an example in http://emacsrocks.com/e13.html. The package's documentation can be found on [[https://github.com/magnars/multiple-cursors.el][GitHub]].

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC

** Text selection

Marks the whole buffer.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-a") 'mark-whole-buffer)
#+END_SRC

** Predictive mode

Installs =predictive-mode=. See more about the installation process in http://www.dr-qubit.org/predictive/predictive-user-manual/html/Obtaining-and-Installing.html.

You can check =predictive-mode= basic documentation in https://www.emacswiki.org/emacs/PredictiveMode.

#+BEGIN_SRC emacs-lisp
;; predictive install location
(add-to-list 'load-path "~/.emacs.d/predictive/")
;; dictionary locations
(add-to-list 'load-path "~/.emacs.d/predictive/latex/")
(add-to-list 'load-path "~/.emacs.d/predictive/texinfo/")
(add-to-list 'load-path "~/.emacs.d/predictive/html/")
;; load predictive package as it is needed.
(autoload 'predictive-mode "predictive" "predictive" t)

(set-default 'predictive-auto-add-to-dict t)
(setq predictive-main-dict 'dict-english
      predictive-auto-learn t
      predictive-add-to-dict-ask nil
      predictive-use-auto-learn-cache nil
      predictive-which-dict t)

(setq predictive-ignore-initial-caps t)
(setq auto-completion-syntax-alist (quote (global accept . word))) ;; Use space and punctuation to accept the current the most likely completion.
(setq auto-completion-min-chars (quote (global . 2))) ;; Avoid completion for short trivial words.
#+END_SRC

* Programming languages

** Python

You can read about python configuration in https://realpython.com/blog/python/emacs-the-best-python-editor/ and
http://www.jesshamrick.com/2012/09/18/emacs-as-a-python-ide/.


#+BEGIN_SRC emacs-lisp
(use-package elpy
  :config
  (elpy-enable))
#+END_SRC 

** c++

#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 4)
#+END_SRC 

** Gap

#+BEGIN_SRC emacs-lisp
(use-package gap-mode
  :init
  (setq gap-executable "~/Software/ProgrammingLanguages/GAP/gap4r8/bin")
  (setq gap-start-options (list "-l" "~/Software/ProgrammingLanguages/GAP/gap4r8/bin/lib" "-m" "2m"))
)
#+END_SRC 

* Tex

Emacs is the best editor even for tex edition! I recommend the following introduction to tex in emacs
https://piotrkazmierczak.com/2010/emacs-as-the-ultimate-latex-editor/.

** Latex-math-mode

Activates latex math mode in Latex.

#+BEGIN_SRC emacs-lisp
;(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+END_SRC

Changes latex math mode prefix. It has to be changed before latex.el is loaded (see an [[http://emacs.1067599.n8.nabble.com/Set-LaTeX-math-abbrev-prefix-td84574.html][explanation]]).

#+BEGIN_SRC emacs-lisp
;(setq LaTeX-math-abbrev-prefix "ç")
#+END_SRC

**** Latex math mode abbreviations

Adds new abbreviations for =latex-math-mode=. They have to be added before =latex.el= is loaded, as happens with changing the prefix.

#+BEGIN_SRC emacs-lisp
(setq LaTeX-math-list
  (quote (
     ("B" "mathbb" "" nil)
     ("K" "mathfrack" "" nil)
     ("R" "mathrm" "" nil)
     ("O" "overline" "" nil)
     ("=" "cong" "" nil)
     ("C-e" "emptyset" "" nil)
     ("<right>" "longrightarrow" "" nil)
     ("<left>" "longleftarrow" "" nil)
     ("C-<right>" "Longrightarrow" "" nil)
     ("C-<left>" "Longleftarrow" "" nil)
     ("^" "widehat" "" nil)
     ("~" "widetilde" "" nil)
     ("'" "partial" "" nil)
     ("0" "varnothing" "" nil)
     ("C-(" "left(" "" nil)
     ("C-)" "right)" "" nil)
     )))
#+END_SRC

Explore these links:
- http://tex.stackexchange.com/questions/29301/emacs-auctex-how-to-get-frac-and-bm
- https://www.reddit.com/r/emacs/comments/3n3l4k/for_auctex_mathmode_how_can_i_add_new_shortcuts/
- http://tex.stackexchange.com/questions/112708/emacs-auctex-can-latex-math-list-read-a-macro-that-requires-input
- http://tex.stackexchange.com/questions/200517/error-adding-new-value-to-latex-math-list-with-custom-function

** CDLaTeX

Not happy with it...
Beginning to be happy with it...

Manual: https://staff.science.uva.nl/c.dominik/Tools/cdlatex/index.html

#+BEGIN_SRC emacs-lisp
(use-package cdlatex
  :init
  (setq cdlatex-env-alist
    '(("def" "\\begin{definition}\n\\end{definition}\n" nil)
      ("thm" "\\begin{theorem}\nAUTOLABEL\n\n\\end{theorem}\n" nil)
      ("lem" "\\begin{lemma}\n\\end{lemma}\n" nil)
      ("prop" "\\begin{proposition}\n\\end{proposition}\n" nil)
      ("cor" "\\begin{corollary}\n\\end{corollary}\n" nil)
      ("rem" "\\begin{remark}\n\\end{remark}\n" nil)
      ("proof" "\\begin{proof}\n\\end{proof}\n" nil)
      ("con" "\\begin{conjecture}\nAUTOLABEL\n\n\\end{conjecture}\n" nil)
      ("exe" "\\begin{exercise}\n  \\begin{statement}\n    \n  \\end{statement}\n  \\begin{answer}\n    \n  \\end{answer}\n\\end{exercise}\n" nil)
      ("ex" "\\begin{ex}\n\\end{ex}\n" nil)
      ("cas" "\\begin{cases}?\\end{cases}" nil)))

  (setq cdlatex-command-alist
    '(("def" "Insert definition env" "" cdlatex-environment ("def") t nil)
      ("thm" "Insert theorem env" "" cdlatex-environment ("thm") t nil)
      ("lem" "Insert lemma env" "" cdlatex-environment ("lem") t nil)
      ("prop" "Insert proposition env" "" cdlatex-environment ("prop") t nil)
      ("cor" "Insert corollary env" "" cdlatex-environment ("cor") t nil)
      ("rem" "Insert remark env" "" cdlatex-environment ("rem") t nil)
      ("proof" "Insert proof env" "" cdlatex-environment ("proof") t nil)
      ("eq" "Insert short equation env" "\\[ ? \\]" cdlatex-position-cursor nil t nil)
      ("oi" "Insert an open interval" "]?[" cdlatex-position-cursor nil t t)
      ("exe" "Insert an exercise env" "" cdlatex-environment ("exe") t nil)
      ("ex" "Insert an example env" "" cdlatex-environment ("ex") t nil)
      ("set" "Insert a set" "\\{?\\}" cdlatex-position-cursor nil t t)
      ("frp" "Insert a fraction with partials" "\\frac{\\partial}{\\partial ?}" cdlatex-position-cursor nil t t)
      ("cas" "Insert a cases env" cdlatex-environment ("cas") t t)
      ("lim" "Insert a limit" "\\lim_{x \\to ?} f(x)" cdlatex-position-cursor nil t t)))

  (setq cdlatex-math-symbol-alist
    '((?i ("\\in" "\\infty" "\\imath"))
      (?t ("\\to" "\\times" "\\tau"))
      (?p ("\\pi" "\\varpi"))
      (?n ("\\ne" "\\nu" "\\nabla"))
      (?c ("\\cap" "\\cup" "\\cos"))
      ;(?< ("\\leftarrow" "\\Leftarrow" "\\longleftarrow" "\\Longleftarrow"))
      ;(?> ("\\rightarrow" "\\Rightarrow" "\\longrightarrow" "\\Longrightarrow"))
  ))

  (setq cdlatex-math-modify-alist
    '((?t "\\text"     "\\text"     t nil nil)
      (?q ("\\mathbb"  nil          t nil nil)
      (?o "\\overline" "\\overline" t nil nil))))

:config
  (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode
)
#+END_SRC

** Auto closed brackets insertion

Tells auctex to automatically close brackets. See the [[https://www.gnu.org/software/auctex/manual/auctex.html#index-LaTeX_002delectric_002dleft_002dright_002dbrace][documentation]].
NOTE: It does not work with CDLaTeX.

#+BEGIN_SRC emacs-lisp
;(setq LaTeX-electric-left-right-brace t)
#+END_SRC

Adds auto close capability for $. See this [[http://tex.stackexchange.com/questions/75697/auctex-how-to-cause-math-mode-dollars-to-be-closed-automatically-with-electric][question]].

(defun brf-TeX-Inserting (sta stb stc num)
  " after entering stb insert stc and go back with the cursor by num positions.
    With prefix nothings gets replaced. If the previous char was sta nothing will be 
    replaces as well." 
  (if (null current-prefix-arg)
      (progn
        (if (= (preceding-char) sta )
            (insert stb)
          (progn (insert stc) (backward-char num))))
    (insert stb)))

(defun brf-TeX-dollarm () (interactive) (brf-TeX-Inserting ?\\ "$"  "$$" 1))
(add-hook 'LaTeX-mode-hook
   (function (lambda ()
       (local-set-key (kbd "$")      'brf-TeX-dollarm))))

** Auctex

Ensures that the auctex package is installed.

#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :init
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
  (setq TeX-PDF-mode t)
)
(require 'latex)
#+END_SRC

** pdf-tools

Uses pdf-tools for treating the pdf.

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  ;:init (setq auto-revert-interval 0.5)
)
#+END_SRC

Makes auctex to use pdf tools and update it automatically after compiling.
#+BEGIN_SRC emacs-lisp
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t)

;; Refreshes the buffer after compilation.
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+END_SRC

** Flymake

*** TODO Check tex syntax

Not ready yet...

#+BEGIN_SRC emacs-lisp
(use-package flymake
  ;:config
  ;(add-hook 'LaTeX-mode-hook 'flymake-mode)
)

(defun flymake-get-tex-args (file-name)
(list "pdflatex"
(list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))
#+END_SRC

*** Check spelling

http://unix.stackexchange.com/questions/86554/make-hunspell-work-with-emacs-and-german-language
http://emacs.stackexchange.com/questions/19982/hunspell-error-in-emacs


**** Adds dictionaries

#+BEGIN_SRC emacs-lisp
(setq ispell-local-dictionary-alist
  '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "en_US") nil utf-8)))
(add-to-list 'ispell-local-dictionary-alist 
  '("es_ES" "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "es_ES") nil utf-8))
#+END_SRC


**** Select hunspell

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "hunspell")
(setq ispell-dictionary "en_US") ; Default dictionary to use
(setq ispell-really-hunspell t)

(add-hook 'org-mode-hook 'flyspell-mode)
(add-hook 'text-mode-hook 'flyspell-buffer)
#+END_SRC

**** TODO Change the current dictionary

Makes =C-c d= to change the current dictionary and checking the buffer accordingly. See https://www.emacswiki.org/emacs/FlySpell#toc5.

NOTE: Currently pressing =C-c d= for the first time changes from english to english.

#+BEGIN_SRC emacs-lisp
(let ((langs '("en_US" "es_ES")))
  (setq lang-ring (make-ring (length langs)))
  (dolist (elem langs) (ring-insert lang-ring elem)))

(defun cycle-ispell-languages ()
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)
    ()
    (message "Switched dictionary to %s." lang))
  (flyspell-buffer)
)

(global-set-key (kbd "C-c d") 'cycle-ispell-languages)
#+END_SRC

**** Keybindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'flyspell-correct-word-before-point)
(global-set-key (kbd "C-c a") 'flyspell-auto-correct-word)
(global-set-key (kbd "C-c b") 'flyspell-buffer)
#+END_SRC

** Compile

Compiles as many times as needed. The keybinding is =C-c l=. See also https://www.emacswiki.org/emacs/TN.

#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook '(lambda () (local-set-key (kbd "C-c l") (kbd "C-c C-a C-c C-a"))))
#+END_SRC

** Reftex

Activates the reftex package for references. See how it works in https://www.gnu.org/software/emacs/manual/html_node/reftex/RefTeX-in-a-Nutshell.html.

We add a eqref reference format. See this [[http://tex.stackexchange.com/questions/118640/using-eqref-with-reftex][question]].

#+BEGIN_SRC emacs-lisp
(use-package reftex
  :init
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-label-alist '(
        (nil ?e nil "~\\eqref{%s}" nil nil)
        ("thm" ?t "Theorem:" "~\\ref{%s}" t  ("theorem" "th.") -3)
  ))
  :config
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
)
#+END_SRC

* Org-mode

Uses org-mode with the keybinding =C-ñ= to preview formulas.

#+BEGIN_SRC emacs-lisp
(use-package org
  :bind
  ("C-ñ" . org-toggle-latex-fragment)
)
#+END_SRC

** Indentation

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
(setq org-indent-mode t)
#+END_SRC

** Functionality

*** Text edition

Supports shift select in org-mode.
Shift selection has conflicts with org-mode. If you want to use it, then some org-mode commands have to be rebinded (see http://orgmode.org/manual/Conflicts.html). The following variable takes care of it.

#+BEGIN_SRC emacs-lisp
 (setq org-support-shift-select t)
#+END_SRC

*** Navigation

Navigation between headings:

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 
            (lambda ()
              (local-set-key "\M-n" 'outline-next-visible-heading)
              (local-set-key "\M-p" 'outline-previous-visible-heading)))
#+END_SRC

** Customization of org-mode

Sets attributes for the standard org-mode faces.

*** Bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets 
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)

(set-face-attribute 'org-level-1 nil
  :inherit 'outline-1
  :foreground "LightGoldenrod1"
  :weight 'bold
  :height 1.1)

(set-face-attribute 'org-level-2 nil
  :inherit 'outline-1 
  :weight 'semi-bold
  :height 1.0)

(set-face-attribute 'org-level-3 nil 
  :inherit 'outline-3 
  :weight 'bold)

(set-face-attribute 'org-level-4 nil
  :inherit 'outline-3 
  :foreground "light steel blue" 
  :weight 'normal)

(set-face-attribute 'org-level-5 nil
  :inherit 'outline-4 
  :foreground "thistle" 
  :weight 'normal)

(set-face-attribute 'org-level-6 nil
  :inherit 'outline-4)

(set-face-attribute 'org-level-8 nil
  :inherit 'outline-7)

(set-face-attribute 'org-link nil
  :inherit 'link 
  :foreground "SlateGray1"
  :underline nil)
#+END_SRC

*** Headings

Avoids that the solarized theme increases headings size for org-mode. This theme use a bigger font for org headings by default. See [[http://emacs.stackexchange.com/questions/18586/strange-behaviour-of-solarized-theme-in-org-mode][Joao Eira's work]] regarding this question.

#+BEGIN_SRC emacs-lisp
(setq solarized-scale-org-headlines nil)
#+END_SRC

Uses a line between headings.

#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 1)
#+END_SRC

**  Auto closed brackets insertion

Activates the =electric-pair-mode=, which inserts brackets in pairs.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (electric-pair-mode 1)))
#+END_SRC

Activates the =electric-pair-mode=, which inserts brackets in pairs. See http://ergoemacs.org/emacs/emacs_insert_brackets_by_pair.html.

(add-hook 'LaTeX-mode-hook (lambda () (electric-pair-mode 1)))

Adds more brackets support to =electric-pair-mode=.

#+BEGIN_SRC emacs-lisp
;; make electric-pair-mode work on more brackets
(setq electric-pair-pairs '(
  (?\" . ?\")
  (?\{ . ?\})
  (?\[ . ?\])
  (?\( . ?\))
  (?$ . ?$)
))
#+END_SRC

Adds support for $. See this [[http://tex.stackexchange.com/questions/75697/auctex-how-to-cause-math-mode-dollars-to-be-closed-automatically-with-electric][question]].

(add-hook 'LaTeX-mode-hook
  '(lambda () (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)))


** Maths

*** Formulas' size

The renderized formulas in org-mode have a predefined size. We want the formulas
to have a size proportional to the text. A solution to this issue was given by
[[http://emacs.stackexchange.com/questions/3387/how-to-enlarge-latex-fragments-in-org-mode-at-the-same-time-as-the-buffer-text][thisirs and Mark]] and is applied below.

#+BEGIN_SRC emacs-lisp
  (defun update-org-latex-fragment-scale ()
    (let ((text-scale-factor
      (expt text-scale-mode-step text-scale-mode-amount)))
      (plist-put org-format-latex-options :scale (* 1.2 text-scale-factor)))
  )
  (add-hook 'text-scale-mode-hook 'update-org-latex-fragment-scale)
#+END_SRC

*** Latex math mode

Activates =latex-math-mode=.

#+BEGIN_SRC emacs-lisp
;(add-hook 'org-mode-hook 'LaTeX-math-mode)
#+END_SRC

*** Cdlatex

Activates =org-cdlatex=. See http://orgmode.org/manual/CDLaTeX-mode.html.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
#+END_SRC

** Images

Tells org-mode to renderize the images inline. More about this issue in http://stackoverflow.com/questions/27129338/inline-images-in-org-mode.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-inline-images t)
#+END_SRC

** References

https://github.com/jkitchin/org-ref/blob/master/org-ref.org

*** eqref

** pdf

Macro to toggle complete preview of latex of an Org file. Keybinded to C-x C-o.

#+begin_src emacs-lisp
(fset 'org-latex-complete-preview
      (lambda (&optional arg) "Keyboard macro." (interactive "p")
        (kmacro-exec-ring-item
         (quote ("" 0 "%d")) arg)
        )
      )
(global-set-key (kbd "C-x C-o") 'org-latex-export-to-pdf)
#+end_src

** agenda

Integrates org-agenda with gnome's agenda.

#+BEGIN_SRC emacs-lisp
;(use-package org-gnome)
#+END_SRC

* Agenda

http://jameswilliams.be/blog/2016/01/11/Taming-Your-GCal.html

https://www.youtube.com/watch?v=IofHvutUWV0

** org-gcal (org-agenda with google calendar)

See [[http://cestlaz.github.io/posts/using-emacs-26-gcal/#.WMqoP-0TacM][cestlaz blog]] for a nice explanation of org-gcal. The code that I use mostly comes from this post.

#+BEGIN_SRC emacs-lisp
(setq package-check-signature nil)

(use-package org-gcal
  :ensure t
  :config  
  (setq org-gcal-client-id "58916212726-uptiek1aumcrrlj26grmoie96liu33sb.apps.googleusercontent.com"
	org-gcal-client-secret "35Q7FCu_S_Atknx-pM7YsDmA"
	org-gcal-file-alist '(("andreshp9@gmail.com" .  "~/Documents/orgfiles/schedule.org")
                          ("j3jst6u2nfsuk0c37b1kl3c4sk@group.calendar.google.com" . "~/Documents/orgfiles/repetitive_tasks.org")
                          ("30jiae6koodln80u78srf58t4k@group.calendar.google.com" . "~/Documents/orgfiles/exams.org")
                          ("82bi6tgguo9iqdpmusnp11ago8@group.calendar.google.com" . "~/Documents/orgfiles/classes.org")))
  (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
  (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
)

(setq org-agenda-files (list "~/Documents/orgfiles/schedule.org"
			     "~/Documents/orgfiles/todo.org"
			     "~/Documents/orgfiles/repetitive_tasks.org"
			     "~/Documents/orgfiles/exams.org"
                         "~/Documents/orgfiles/classes.org"))

(setq org-capture-templates
  '(("a" "Appointment" entry (file  "~/Documents/orgfiles/schedule.org" )
	 "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
	("l" "Link" entry (file+headline "~/Documents/orgfiles/links.org" "Links")
	 "* %? %^L %^g \n%T" :prepend t)
	("e" "Exam" entry (file+headline "~/Documents/orgfiles/exams.org" "Exams")
	 "* %?\n\n %^T\n\n%T" :prepend t)
	("b" "Blog idea" entry (file+headline "~/Documents/orgfiles/todo.org" "Blog Topics:")
	 "* %?\n%T" :prepend t)
	("t" "To Do Item" entry (file+headline "~/Documents/orgfiles/todo.org" "To Do")
	 "* TODO %?\n%u" :prepend t)
	("n" "Note" entry (file+headline "~/Documents/orgfiles/todo.org" "Note space")
	 "* %?\n%u" :prepend t)
	("j" "Journal" entry (file+datetree "~/Documents/orgfiles/journal.org")
	 "* %?\nEntered on %U\n  %i\n  %a")
	("s" "Screencast" entry (file "~/Documents/orgfiles/screencastnotes.org")
	 "* %?\n%i\n")))

(define-key global-map "\C-cc" 'org-capture)

#+END_SRC


** calfw (graphic calendar)

#+BEGIN_SRC emacs-lisp
(use-package calfw
  :ensure ;TODO: 
  :config
  (require 'calfw) 
  (require 'calfw-org)
  (setq cfw:org-overwrite-default-keybinding t)
  (require 'calfw-ical)

  (defun my-open-calendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "Green")  ; orgmode source
      (cfw:ical-create-source "gcal" "https://calendar.google.com/calendar/ical/andreshp9%40gmail.com/public/basic.ics" "IndianRed")
      (cfw:ical-create-source "gcal" "https://calendar.google.com/calendar/ical/82bi6tgguo9iqdpmusnp11ago8%40group.calendar.google.com/public/basic.ics" "IndianRed") ; google calendar ICS
      ))) 
  (setq cfw:org-overwrite-default-keybinding t))

(use-package calfw-gcal
	:ensure t
	:config
	(require 'calfw-gcal))
#+END_SRC


(setq org-default-notes-file "~/Documents/orgfiles/todo.org")
;(define-key global-map "\C-cc" 'org-capture)

Log done state in TODOs
(setq org-log-done t)

Set Org-Capture templates
;(setq org-capture-templates
;  `(("t" "todo" entry (file+headline "~/Documents/orgfiles/todo.org" "Tasks")
;    "** TODO %^{Task} %?")))

(setq org-agenda-files (list "~/Documents/orgfiles/todo.org"
                             "~/Documents/orgfiles/schedule.org"
))

#+BEGIN_SRC emacs-lisp
; Set key combos
(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC


Code to open my own calendar.

(use-package calfw)
(require 'calfw-org)

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source "Green")  ; orgmode source
    ;(cfw:howm-create-source "Blue")  ; howm source
    ;(cfw:cal-create-source "Orange") ; diary source
    ;(cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
    (cfw:ical-create-source "gcal" "https://calendar.google.com/calendar/ical/andreshp9%40gmail.com/public/basic.ics" "IndianRed") ; google calendar ICS
   ))) 
;(define-key global-map "\C-ca" 'my-open-calendar)

* Theme

** Cursor

More about the emacs' cursor in https://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html.

#+BEGIN_SRC emacs-lisp
(setq-default cursor-type '(bar . 3) ) 
#+END_SRC

The cursor is set in blink mode, that is, it blinks every second. By default, the cursor blinks every second unless emacs is inactive for 10 seconds.

#+BEGIN_SRC emacs-lisp
;(setq blink-cursor-mode t)
#+END_SRC

** Lines format

*** Highlight the current line

The current line is high-lighted.

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC 

*** Enumerate each line

Activates the linum mode so that the lines number are shown in the left margin.
The code also sets the [[http://stackoverflow.com/questions/21861491/how-to-add-padding-to-emacs-nw-linum-mode][linum mode's format]].

#+BEGIN_SRC emacs-lisp
(use-package linum
  :init
  (setq linum-format " %d  ")
  :config
  (global-linum-mode 1)
)
#+END_SRC 

Use a left fridge size of the same size than the current font. The code is due to [[http://unix.stackexchange.com/questions/29786/font-size-issues-with-emacs-in-linum-mode/30087#30087][Pablo Machón]].

#+BEGIN_SRC emacs-lisp
(defun linum-update-window-scale-fix (win)
  "fix linum for scaled text"
  (set-window-margins win
    (ceiling (* 
      (if (boundp 'text-scale-mode-step) (expt text-scale-mode-step text-scale-mode-amount) 1)
      (if (car (window-margins)) (car (window-margins)) 1)
    ))
  )
)
(advice-add #'linum-update-window :after #'linum-update-window-scale-fix)
#+END_SRC 


Changes the frindge size
http://emacsredux.com/blog/2015/01/18/customizing-the-fringes/
(fringe-mode 4)

** Colors

#+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :init
  (load-theme 'solarized-light t)
)
#+END_SRC

** Split windows

How to change the default split-screen direction?
http://stackoverflow.com/questions/7997590/how-to-change-the-default-split-screen-direction

#+BEGIN_SRC emacs-lisp
(setq split-width-threshold nil)
#+END_SRC

* Default screens and buffers

Splits the screen and open some buffers (myinit.org, shortcuts.org, *scratch*), see this [[http://stackoverflow.com/questions/999708/how-to-open-files-automatically-when-starting-emacs][question]].
Recall that todo.org is the initial buffer choice.
#+BEGIN_SRC emacs-lisp
;(org-agenda-list)
(cfw:open-org-calendar)
(split-window-horizontally)
(find-file "/home/andreshp/.emacs.d/myinit.org") 
(split-window-vertically)
;(switch-to-buffer "*scratch*")
;(find-file "/home/andreshp/.emacs.d/shortcuts.org") 
#+END_SRC 


Adds a default file, which will be opened each time that you open emacs (see this [[http://stackoverflow.com/questions/7083181/how-to-load-file-into-buffer-and-switch-to-buffer-on-start-up-in-emacs][question]]).
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
;(setq initial-buffer-choice "*scratch*")
#+END_SRC 

* TODO Features to add

** Wanted features

- Auctex equations formatting.
- Auctex shortcut for formatting.
- org-mode shortcut for compiling the pdf.
- Install https://github.com/tlh/workgroups.el.
- org-mode snippet and shortcut for writing #+BEGIN_SRC, etc.
- cua-mode : C-v paste on selected text.

** Possible features

- clatex : https://github.com/cdominik/cdlatex


